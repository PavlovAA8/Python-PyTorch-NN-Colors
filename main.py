# -*- coding: utf-8 -*-
"""main.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/github/PavlovAA8/Python-PyTorch-NN-Colors/blob/main/main.ipynb
"""

import os
import torch
import torch.nn as nn
import torch.optim as optim
import torchvision.transforms as transforms
import torch.nn.functional as F
from torchvision import datasets, models
from torch.utils.data import DataLoader
from sklearn.model_selection import train_test_split
from PIL import Image

# Параметры
data_dir = '/content/drive/MyDrive/Colab Notebooks/colors'  # Путь к папке с датасетом
num_classes = 12  # Количество классов (цветов)
batch_size = 32 # Количество батчей
num_epochs = 10 #Количетсво эпох
learning_rate = 0.001

# Изменение размера картинки
transform = transforms.Compose([
    transforms.Resize((128, 128)),
    transforms.ToTensor(),
])

# Загрузка данных
dataset = datasets.ImageFolder(data_dir, transform=transform)
train_size = int(0.8 * len(dataset))
test_size = len(dataset) - train_size
train_dataset, test_dataset = torch.utils.data.random_split(dataset, [train_size, test_size])

train_loader = DataLoader(train_dataset, batch_size=batch_size, shuffle=True)
test_loader = DataLoader(test_dataset, batch_size=batch_size, shuffle=False)

# Определение модели
class SimpleCNN(nn.Module):
    def __init__(self):
        super(SimpleCNN, self).__init__()
        self.conv1 = nn.Conv2d(3, 16, kernel_size=3, padding=1)
        self.conv2 = nn.Conv2d(16, 32, kernel_size=3, padding=1)
        self.pool = nn.MaxPool2d(kernel_size=2, stride=2)
        self.fc1 = nn.Linear(32 * 32 * 32, 128)
        self.fc2 = nn.Linear(128, num_classes)

    def forward(self, x):
        x = self.pool(F.relu(self.conv1(x)))
        x = self.pool(F.relu(self.conv2(x)))
        x = x.view(-1, 32 * 32 * 32)
        x = F.relu(self.fc1(x))
        x = self.fc2(x)
        return x
model = SimpleCNN()
criterion = nn.CrossEntropyLoss()
optimizer = optim.Adam(model.parameters(), lr=learning_rate)

# Обучение модели
for epoch in range(num_epochs):
    model.train()
    running_loss = 0.0
    for images, labels in train_loader:
        optimizer.zero_grad()# Обнуление градиентов
        outputs = model(images) # Прямой проход
        loss = criterion(outputs, labels)  # Вычисление потеьр
        loss.backward() # Обратный проход
        optimizer.step() # Обновление параметров
        running_loss += loss.item()

    print(f'Epoch [{epoch + 1}/{num_epochs}], Loss: {running_loss / len(train_loader):.4f}')

# Оценка модели
model.eval()
correct = 0
total = 0
with torch.no_grad():
    for images, labels in test_loader:
        outputs = model(images)
        _, predicted = torch.max(outputs.data, 1)
        total += labels.size(0)
        correct += (predicted == labels).sum().item()

print(f'Точность модели на тестовых изображениях: {100 * correct / total:.2f}%')

# Сохранение модели
torch.save(model.state_dict(), 'color_classifier.pth')

# Функция для предсказания цвета на новом изображении
def predict_color(image_path):
    model.eval()
    image = Image.open(image_path)
    image = transform(image).unsqueeze(0)  # Добавляем размерность для батча
    with torch.no_grad():
        output = model(image)
        _, predicted = torch.max(output.data, 1)
    return dataset.classes[predicted.item()]

# Пример использования функции предсказания
color = predict_color('/content/drive/MyDrive/Colab Notebooks/colors/final.jpg')
print(f'Предполагаемый цвет: {color}')